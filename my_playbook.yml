---
- hosts: servers
  become: yes
  tasks:
    - name: Clean APT cache
      apt:
        clean: yes
      ignore_errors: yes

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install resolvconf
      apt:
        name: resolvconf
        state: present

    - name: Configure permanent DNS servers
      blockinfile:
        path: /etc/resolvconf/resolv.conf.d/head
        create: yes
        block: |
          nameserver 10.202.10.202
          nameserver 10.202.10.102
          nameserver 178.22.122.100
          nameserver 185.51.200.2
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: Update resolvconf
      command: resolvconf -u

    - name: Check if systemd-resolved exists
      stat:
        path: /lib/systemd/system/systemd-resolved.service
      register: systemd_resolved_service

    - name: Disable systemd-resolved if it exists
      systemd:
        name: systemd-resolved
        state: stopped
        enabled: no
      when: systemd_resolved_service.stat.exists

    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable
        state: present

    - name: Update APT cache again
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create directory for application files
      file:
        path: /root/deploy/my-app-flask/
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy application files to the target server
      synchronize:
        src: /home/gitlab-runner/builds/iLX2yTsKH/0/root/my-app-flask/
        dest: /root/deploy/my-app-flask/
        mode: push
        recursive: yes
        rsync_opts:
          - "--exclude=*.pyc"

    - name: Stop and remove old Docker container if exists
      docker_container:
        name: my-flask-app
        state: absent
      ignore_errors: yes

    - name: Build Docker image
      docker_image:
        name: my-flask-app
        tag: "{{ CI_COMMIT_TAG }}"
        source: build
        build:
          path: /root/deploy/my-app-flask/
        force_source: yes

    - name: Run Docker container
      docker_container:
        name: my-flask-app
        image: "my-flask-app:{{ CI_COMMIT_TAG }}"
        state: started
        ports:
          - "8081:8081"
        restart_policy: always
