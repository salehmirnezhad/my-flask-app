stages:
  - build
  - test
  - deploy

variables:
  VERSION: "v1.0.${CI_PIPELINE_ID}"
  CONTAINER_NAME: "flask_app"
  IMAGE_NAME: "my-flask-app"

build:
  stage: build
  script:
    - echo "Building the application..."
    - cd /root/my-flask-app
    - docker build -t ${IMAGE_NAME}:${VERSION} .
    # Clean up old images
    - docker image prune -f
  timeout: 60m
  allow_failure: false

test:
  stage: test
  script:
    - echo "Running tests..."
    - docker run --rm ${IMAGE_NAME}:${VERSION} pytest
  timeout: 60m
  allow_failure: false

deploy:
  stage: deploy
  script:
    - echo "Deploying the application..."
    # Stop and remove existing container if it exists
    - docker ps -q -f name=${CONTAINER_NAME} | xargs -r docker stop
    - docker ps -a -q -f name=${CONTAINER_NAME} | xargs -r docker rm
    # Remove old images
    - docker images -q ${IMAGE_NAME} | xargs -r docker rmi
    # Run new container with updated image
    - docker run -d --name ${CONTAINER_NAME} -p 8081:8081 ${IMAGE_NAME}:${VERSION}
  timeout: 60m
  allow_failure: false
